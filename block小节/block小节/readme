1、block实现
2、block存储域
   Block转换Block的结构体类型的自动变量，__block变量转换为__block变量的结构体类型的自动变量。所谓结构体类型的自动变量，即栈上生成的该结构体的实例
————————————————————————————————————————————————————
|  名称              |  实质                         |
————————————————————————————————————————————————————
|  Block            |  栈上Block的结构体实例          |
————————————————————————————————————————————————————
|  __block变量       |  栈上__block变量的结构体实例    |
————————————————————————————————————————————————————
Block也是Objective—C对象。将Block当作Objective—C对象来看时，该Block的类为_NSConcreteStackBlock。虽然该类并没有出现在已变换源代码中，但有很多与之类似的类，如：
       _NSConcreteStackBlock
       _NSConcreteGlobalBlock
       _NSConcreteMallocBlock
首先，我们能够注意到_NSConcreteStackBlock类名中含有“栈”（stack）一词，即该类的对象Block设置在栈上。
同样地，_NSConcreteGlobalBlock类对象如其名“全局”（global）所示，与全局变量一样，设置在程序的数据区域（.data区）中。
      _NSConcreteMallocBlock类对象则设置在由malloc函数分配的内存块（即堆）中。
————————————————————————————————————————————————————
|类                        |设置对象的存储域
————————————————————————————————————————————————————
| _NSConcreteStackBlock    |栈
————————————————————————————————————————————————————
| _NSConcreteGlobalBlock   |程序的数据区域(.data区)
————————————————————————————————————————————————————
| _NSConcreteMallocBlock   |堆
————————————————————————————————————————————————————
即：如图block存储域.png

1、Block例子大多数使用的都是_NSConcreteStackBlock类，且设置在栈上
2、在记述全局变量的地方使用Block语法时，及Block语法的表达式中不使用应截获的自动变量时，生成的Block为_NSConcreteGlobalBlock类对象
3、Block超出变量作用域可存在的原因，及__block变量用结构体成员变量__forwarding存在的原因，将Block配置在堆上的_NSConcreteMallocBlock类使用

Block的副本
————————————————————————————————————————————————————————————————
|Block的类                |副本源的配置存储域    |复制效果          |
————————————————————————————————————————————————————————————————
|_NSConcreteStackBlock   |栈                  |从栈复制到堆      |
————————————————————————————————————————————————————————————————
|_NSConcreteGlobalBlock  |程序的数据区域        |什么也不做        |
————————————————————————————————————————————————————————————————
|_NSConcreteMallocBlock  |堆                  |引用计数增加      |
————————————————————————————————————————————————————————————————

不管Block配置在何处，用copy方法复制都不会引起任何问题。在不确定时调用copy方法即可。
